1. Что такое ООП

Чем сложнее задачи и проекты, с которыми мы работаем, тем более сложные парадигмы программирования нам необходимо использовать. Например, выполняя определенные вычисления, мы можем создавать переменные для хранения результатов вычисления. Это позволяет нам многократно обращаться к этим данным, а также дать этим данным осмысленное имя.
Или при необходимости многократно выполнять одни и те же инструкции, мы можем выделить их в отдельный метод. Данная методика называется процедурным программированием. Она избавляет нас от необходимости дублировать код, единожды определив нужный нам метод. Она также позволяет нам работать с кодом метода в месте его определения, без необходимости исправлять каждое место, где мы используем этот метод.
Основной парадигмой языка C# является ООП.
Данная парадигма позволяет нам ассоциировать реальные объекты нашего мира с их (свойствами и поведением) и тем кодом, который мы пишем, а главными сущностями для этой парадигмы являются классы и объекты (или экземпляры классов).

(пример кода 1) Например. У нас есть конкретный автомобиль, новая Kia Rio. У автомобиля есть производитель, цвет, мощность двигателя, расход топлива и так далее. 
Для данного автомобиля производитель Kia, цвет белый, мощность 123 лошадиных сил, а расход топлива 6.4 литра на 100км. Также любой автомобиль умеет ехать и тормозить.
Когда мы говорим о конкретном автомобиле с конкретными свойствами, мы называем его объектом или экземпляром класса. Классом же мы называем тот шаблон, которому соотвествуют все машины: у всех машин есть производитель, мощность двигателя, цвет и так далее
Давайте сразу же напишем наш класс и наш экземпляр класса

2. (пример кода 2) для объявления собственного класса нам нужно использовать ключевое слово class и после указать имя нашего будущего класса. Затем мы пишем фигурные скобки и уже внутри них будет тело нашего класса. Обратите внимание, что новый класс мы создали вне нашего класса Program, который у всегда автоматически создается.
Мы написали класс и можем увидеть, что мы дали описание или же шаблон для программиста, который захочет создать экземпляр вашего класса. Давайте создадим экземпляр класса

3. (пример кода 3) при объявлении переменной мы можем увидеть знакомый нам оператор new, который мы использовали при создании массивов и строк. Как и массивы, класс является ссылочным типом данных, а для его экземпляров нам необходимо выделить память в куче, для чего и используется оператор new.
 (открыть дебагер и показать, что поля экземпляра класса уже инициализированы. Там будут поля со значением null, сказать, что расскажем далее) Мы создали экземляр нашего класса и теперь нам нужно указать значения нашего автомобиля. 
3.1. Показать, что можно создавать сколько угодно экземпляров классов

4. Выведем данные о нашем автомобиле (Пример кода 4). Написанный нами код мы можем использовать и для других экземпляров данного класса. Для этого мы напишем метод, который будет принимать экземпляр класса Car. Давайте вынесем это (Пример кода 4) в отдельный метод (пример кода 5). В качестве принимаемого параметра у нас должен быть наш автомобиль. Теперь мы можем использовать данный метод для любого экземпляра автомобиля(показать, стереть дублирующий код в main)
Вспомним то, как передаются массивы в метод. Массив является ссылочным объектом: в метод передается ссылка на область памяти, где находятся данные массива. Если мы изменим данные в методе, мы изменим их также в исходном массиве. Класс также является ссылочным типом данных. на самом деле массив сам является классом, но не обычным, а абстрактным, но об этом позже.
При передаче экземпляра класса в метод и изменении его полей в этом методе, значение этих полей изменится для исходного объекта (пример кода 6.) (запустить 6, потому распечатать)

5. Показать вынесение класса в отдельный файл
