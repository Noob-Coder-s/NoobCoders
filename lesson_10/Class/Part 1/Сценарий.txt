1. Что такое ООП

Мы уже знакомы с одной парадигмой программирования - процедурным программированием. Когда мы писали собственные методы и использовали их, это и есть процедурное программирование.
Такой способ программирования позволяет нам избегать излишнего написания кода, экономить наше время, а также позволяет использовать уже написанный код повторно. Но современные программы настолько сложны, что одной парадигмы становится недостаточно. И здесь на помощь и приходит объектно-ориентированное программирование или ООП.
Так что такое ООП? это парадигма программирования, благодаря которой мы можем ассоциировать реальные объекты нашего мира с их (свойствами и поведением) и тем кодом, который мы пишем.

(пример кода 1) Например. У нас есть конкретно наш автомобиль, предположим это новая Kia Rio. У автомобиля есть производитель, цвет, мощность двигателя, расход топлива и так далее. 
Для нашей машины производитель Kia, цвет белый, мощность 123 лошадиных сил, а расход топлива 6.4 литра на 100км. Также наш автомобиль умеет двигаться и останавливаться.
Когда мы говорим о конкретном автомобиле с конкретными свойствами, мы называем его объектом или экземпляром класса. Классом же мы называем тот шаблон, которому соотвествуют все машины: у всех машин есть производитель, мощность двигателя, цвет и так далее
Давайте сразу же напишем наш класс и наш экземпляр класса

2. (пример кода 2) для объявления собственного класса нам нужно использовать ключевое слово class и после указать имя нашего будущего класса. Затем мы пишем фигурные скобки и уже внутри них будет тело нашего класса. Обратите внимание, что новый класс мы создали вне нашего класса Program, который у всегда автоматически создается.
Мы написали класс и можем увидеть, что мы дали описание или же шаблон для программиста, который захочет создать экземпляр вашего класса. Давайте создадим экземпляр класса

3. (пример кода 3) при объявлении переменной мы можем увидеть знакомый нам оператор new, который мы использовали при создании массивов и строк. Как и массивы, класс является ссылочным типом данных, а для его экземпляров нам необходимо выделить память в куче, для чего и используется оператор new.
 (открыть дебагер и показать, что поля экземпляра класса уже инициализированы. Там будут поля со значением null, сказать, что расскажем далее) Мы создали экземляр нашего класса и теперь нам нужно указать значения нашего автомобиля. 

4. Давайте разберем, как мы можем использовать класс в качестве типа данных параметра наших методов. Начнем с простого: мы явно не хотим писать кучу кода каждый раз, когда хотим узнать характеристики нашего автомобиля (Пример кода 4). 
Давайте вынесем это в отдельный метод (пример кода 5). В качестве принимаемого параметра у нас разумеется должен быть наш автомобиль. Теперь мы можем выводить информацию о нашем автомобиле, используя новый метод (показать, стереть дублирующий код в main)
Вспомним то, как передаются массивы в метод. Массив является ссылочным объектом: в метод передается ссылка на область памяти, где находятся данные массива. Если мы изменим данные в методе, мы изменим их также в исходном массиве. Класс также является ссылочным типом данных. на самом деле массив сам является классом, но не обычным, а абстрактным, но об этом позже.
При передаче экземпляра класса в метод и изменении его полей в этом методе, значение этих полей изменится для исходного объекта (пример кода 6.) (запустить 6, потому распечатать)

4. Посмотрим на то, как мы объявляем значения полей объекта. Такой синтаксис не очень удобный, а в дальнейшем мы убедимся в том, что он еще и не безопасный. Давайте поймем, что мы можем сделать с ним. При объявлении экземпляра класса мы сразу же его инициализируем. Для этого мы используем конструктор класса. 
Конструктор класса это метод класса, который создает экземпляр класса. Car() и есть наш конструктор. Мы никакие классы в нашем классе еще не писали, а конструктор для нашего класса уже есть. И у любого класса будет конструктор по умолчанию, если мы не создадим собственный конструктор. 
(пример кода 7) конструктор это метод, у которого название как у самого класса, а возвращаемого значение у него не указано. В методах класса у нас есть доступ к полям нашего объекта. В конструкторе мы можем задавать этим полям значения и тогда у нашего объекта будут указанные поля
напишем собственный конструктор по умолчанию. Просто скопируем весь код, когда определяли каждое поле объекта класса. Вышло неплохо: теперь мы можем создавать кучу киа рио с одними и теми характеристиками. Но наш класс называется не кио рио, а автомобиль и нам хочется создавать разные автомобили. 

5. (пример кода 8) Давайте перегрузим наш конструктор: создадим еще один с другим набором параметров. Только надо учесть то, что поля нашего объекта и параметры конструктора будут в одном пространстве имен, а значит компилятор не поймет, что к чему мы хотим присвоить. Решения два:
 1) Назвать параметры конструктора другим именем (или переименовать поля)
 2) использовать ключевое слово this. С ним мы будем обращаться именно к полям нашего объекта. Подробнее разберем это позже

(пример кода 9) (показать что ide подсказывает следующие аргументы конструктора) (возможно тут показать именнованые параметры!!!)

6. Показать вынесение класса в отдельный файл


2. Передача объекта класса в метод