1. Что такое ООП

Чем сложнее задачи и проекты, с которыми мы работаем, тем более сложные парадигмы программирования нам необходимо использовать. Например, выполняя определенные вычисления, мы можем создавать переменные для хранения результатов вычисления. Это позволяет нам многократно обращаться к этим данным, а также дать этим данным осмысленное имя.
Или при необходимости многократно выполнять одни и те же инструкции, мы можем выделить их в отдельный метод. Данная методика называется процедурным программированием. Она избавляет нас от необходимости дублировать код, единожды определив нужный нам метод. Она также позволяет нам работать с кодом метода в месте его определения, без необходимости исправлять каждое место, где мы используем этот метод.

Язык C# является мультипарадигменным языком программирования, в нём сочетаются черты и императивного, и процедурного, и даже функционального программирования. Однако превалирующей парадигмой языка C# является ООП.
Данная парадигма позволяет нам ассоциировать реальные объекты нашего мира с их (атрибутами и поведением) и тем кодом, который мы пишем, а главными сущностями для этой парадигмы являются классы и объекты (или экземпляры классов).

(пример кода 1) Например. У нас есть конкретный автомобиль, новая Kia Rio. У автомобиля есть производитель, цвет, мощность двигателя, расход топлива и так далее. 
Для данного автомобиля производитель Kia, цвет белый, мощность 123 лошадиных сил, а расход топлива 6.4 литра на 100км. Также любой автомобиль умеет ехать и тормозить.
Когда мы говорим о конкретном автомобиле с конкретными свойствами, мы называем его объектом или экземпляром класса. Классом же мы называем тот шаблон, которому соотвествуют все машины: у всех машин есть производитель, мощность двигателя, цвет и так далее
Давайте сразу же напишем наш класс и наш экземпляр класса

2. (пример кода 2) для объявления собственного класса нам нужно использовать ключевое слово class и после указать имя нашего будущего класса. Затем мы пишем фигурные скобки и уже внутри них будет тело нашего класса. Обратите внимание, что новый класс мы создали вне нашего класса Program, который у всегда автоматически создается.
Мы написали класс и можем увидеть, что мы дали описание или же шаблон для программиста, который захочет создать экземпляр вашего класса. Давайте создадим экземпляр класса

3. (пример кода 3) при объявлении переменной мы можем увидеть знакомый нам оператор new, который мы использовали при создании массивов и строк. Как и массивы, класс является ссылочным типом данных, а для его экземпляров нам необходимо выделить память в куче, для чего и используется оператор new.
 (открыть дебагер и показать, что поля экземпляра класса уже инициализированы. Там будут поля со значением null, сказать, что расскажем далее) Мы создали экземляр нашего класса и теперь нам нужно указать значения нашего автомобиля. 
  * Показать, что можно создавать сколько угодно экземпляров классов
  * Показать пример вызова метода с передачей экземпляра для вывода информации об экземпляре (значений его полей)
  * Показать присвоение, мутирование объектов по ссылке, передачу в метод экземпляра класса как ссылочного типа
  * Показать пример метода, который конструирует экземпляр класса и возвращает его
  * Показать пример использования коллекции объектов пользовательского класса

4. Показать вынесение класса в отдельный файл

5. Класс наряду с полями, в которых лежат значения, также может содержать методы со своей логикой. Это обычные методы, с которыми вы уже знакомы, но в этом методе можно обращаться напрямую к полям того экземпляра, в контексте которого был вызван метод нашего класса (можно упомянуть про this.FieldName)
  * пример с PrintSelf() методом, который выводит описание экземпляра (на следующий урок показать пример `override ToString()`)

6. Пример с Player-Card-Rank-Suit, продемонстрировать обращение к вложенным объектам, коллекциям и индексаторам
